// Generated by CoffeeScript 1.6.3
(function() {
  var catApply, flatSplat, inDir, partial2, partial3, path, reverse2, splattedPartial2, _,
    __slice = [].slice;

  _ = require("underscore");

  reverse2 = function(fn) {
    return function(x, y) {
      return fn(y, x);
    };
  };

  partial2 = function(fn, x, y) {
    if (y != null) {
      return fn(x, y);
    } else if (x != null) {
      return function(y) {
        return fn(x, y);
      };
    } else {
      return function(x, y) {
        if (y != null) {
          return fn(x, y);
        } else {
          return function(y) {
            return fn(x, y);
          };
        }
      };
    }
  };

  partial3 = function(fn, x, y, z) {
    if (z != null) {
      return fn(x, y, z);
    }
    if (y != null) {
      return function(z) {
        return fn(x, y, z);
      };
    }
    if (x != null) {
      return function(y, z) {
        if (z != null) {
          return fn(x, y, z);
        } else {
          return function(z) {
            return fn(x, y, z);
          };
        }
      };
    } else {
      return function(x, y, z) {
        if (z != null) {
          return fn(x, y, z);
        }
        if (y != null) {
          return function(z) {
            return fn(x, y, z);
          };
        }
        return function(y, z) {
          if (z != null) {
            return fn(x, y, z);
          } else {
            return function(z) {
              return fn(x, y, z);
            };
          }
        };
      };
    }
  };

  flatSplat = function(aList) {
    if (_.size(aList) === 1 && _.isArray(aList[0])) {
      return aList[0];
    } else {
      return aList;
    }
  };

  path = require("path");

  inDir = function(dirName) {
    return function(fName) {
      return path.join(dirName, fName);
    };
  };

  catApply = function() {
    var args, fn;
    fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    args = _.flatten(args);
    return fn.apply(null, args);
  };

  splattedPartial2 = function() {
    var fn, x, y;
    fn = arguments[0], x = arguments[1], y = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    if ((y != null) && _.size(y) > 0) {
      console.log(_.size(y));
      console.log("si");
      return catApply(fn, x, y);
    } else {
      if (x != null) {
        return function() {
          var y;
          y = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return catApply(fn, x, y);
        };
      } else {
        return function() {
          var x, y;
          x = arguments[0], y = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          if ((y != null) && _.size(y) > 0) {
            return catApply(fn, x, y);
          } else {
            return function() {
              var y;
              y = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return catApply(fn, x, y);
            };
          }
        };
      }
    }
  };

  module.exports = {
    reverse2: reverse2,
    partial2: partial2,
    partial3: partial3,
    flatSplat: flatSplat,
    splattedPartial2: splattedPartial2,
    inDir: inDir
  };

}).call(this);
