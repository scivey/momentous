// Generated by CoffeeScript 1.6.3
(function() {
  var flatSplat, inDir, inhere, misc, partial2, path, reverse2, selectors, splattedPartial2, _, _ref,
    __slice = [].slice;

  path = require("path");

  _ref = require(path.join(__dirname, "util.js")), reverse2 = _ref.reverse2, partial2 = _ref.partial2, flatSplat = _ref.flatSplat, inDir = _ref.inDir, splattedPartial2 = _ref.splattedPartial2;

  _ = require("underscore");

  inhere = inDir(__dirname);

  misc = require(inhere("misc.js"));

  selectors = (function() {
    var allAfter, allBefore, closestAfter, closestBefore, closestTo, earliest, farthestAfter, farthestBefore, farthestFrom, latest, oneArgs, twoArgs, _outs;
    earliest = function() {
      var i, momentList, _earliestSoFar, _i, _ref1;
      momentList = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_.isArray(momentList[0])) {
        momentList = momentList[0];
      }
      _earliestSoFar = momentList[0];
      for (i = _i = 1, _ref1 = momentList.length - 1; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 1 <= _ref1 ? ++_i : --_i) {
        if (momentList[i].isBefore(_earliestSoFar)) {
          _earliestSoFar = momentList[i];
        }
      }
      return _earliestSoFar;
    };
    latest = function() {
      var i, momentList, _i, _latestSoFar, _ref1;
      momentList = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_.isArray(momentList[0])) {
        momentList = momentList[0];
      }
      _latestSoFar = momentList[0];
      for (i = _i = 1, _ref1 = momentList.length - 1; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 1 <= _ref1 ? ++_i : --_i) {
        if (momentList[i].isAfter(_latestSoFar)) {
          _latestSoFar = momentList[i];
        }
      }
      return _latestSoFar;
    };
    allBefore = function() {
      var compareAgainst, momentList, _before;
      compareAgainst = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (_.isArray(momentList[0])) {
        momentList = momentList[0];
      }
      _before = _.filter(momentList, function(aMoment) {
        return aMoment.isBefore(compareAgainst);
      });
      return _before;
    };
    allAfter = function() {
      var compareAgainst, momentList, _after;
      compareAgainst = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (_.isArray(momentList[0])) {
        momentList = momentList[0];
      }
      _after = _.filter(momentList, function(aMoment) {
        return aMoment.isAfter(compareAgainst);
      });
      return _after;
    };
    closestTo = function() {
      var compareAgainst, i, momentList, _closestSoFar, _diff, _i, _minDiff, _ref1;
      compareAgainst = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (_.isArray(momentList[0])) {
        momentList = momentList[0];
      }
      _closestSoFar = momentList[0];
      _minDiff = misc.absDiff(compareAgainst, momentList[0]);
      for (i = _i = 1, _ref1 = momentList.length - 1; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 1 <= _ref1 ? ++_i : --_i) {
        _diff = misc.absDiff(compareAgainst, momentList[i]);
        if (_diff < _minDiff) {
          _closestSoFar = momentList[i];
          _minDiff = _diff;
        }
      }
      return _closestSoFar;
    };
    farthestFrom = function() {
      var compareAgainst, i, momentList, _diff, _farthestSoFar, _i, _maxDiff, _ref1;
      compareAgainst = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (_.isArray(momentList[0])) {
        momentList = momentList[0];
      }
      _farthestSoFar = momentList[0];
      _maxDiff = misc.absDiff(compareAgainst, momentList[0]);
      for (i = _i = 1, _ref1 = momentList.length - 1; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 1 <= _ref1 ? ++_i : --_i) {
        _diff = misc.absDiff(compareAgainst, momentList[i]);
        if (_diff > _maxDiff) {
          _farthestSoFar = momentList[i];
          _maxDiff = _diff;
        }
      }
      return _farthestSoFar;
    };
    closestBefore = function() {
      var compareAgainst, momentList;
      compareAgainst = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return closestTo(compareAgainst, allBefore(compareAgainst, flatSplat(momentList)));
    };
    closestAfter = function() {
      var compareAgainst, momentList;
      compareAgainst = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return closestTo(compareAgainst, allAfter(compareAgainst, flatSplat(momentList)));
    };
    farthestBefore = function() {
      var compareAgainst, momentList;
      compareAgainst = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return farthestFrom(compareAgainst, allBefore(compareAgainst, flatSplat(momentList)));
    };
    farthestAfter = function() {
      var compareAgainst, momentList;
      compareAgainst = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return farthestFrom(compareAgainst, allAfter(compareAgainst, flatSplat(momentList)));
    };
    _outs = {};
    oneArgs = {
      earliest: earliest,
      latest: latest
    };
    _.extend(_outs, oneArgs);
    twoArgs = {
      allBefore: allBefore,
      allAfter: allAfter,
      closestTo: closestTo,
      closestBefore: closestBefore,
      closestAfter: closestAfter,
      farthestFrom: farthestFrom,
      farthestBefore: farthestBefore,
      farthestAfter: farthestAfter
    };
    _.each(_.pairs(twoArgs), function(onePair) {
      var fnName, fnRef;
      fnName = onePair[0];
      fnRef = onePair[1];
      return _outs[fnName] = splattedPartial2(fnRef);
    });
    return _outs;
  })();

  module.exports = selectors;

}).call(this);
