// Generated by CoffeeScript 1.6.3
(function() {
  var flatSplat, inDir, inHere, momentVal, negMomentVal, negate, partial1, partial2, path, reverse2, sorters, _, _g, _ref,
    __slice = [].slice;

  path = require("path");

  _ref = require(path.join(__dirname, "util.js")), reverse2 = _ref.reverse2, partial2 = _ref.partial2, flatSplat = _ref.flatSplat, inDir = _ref.inDir;

  _ = require("underscore");

  inHere = inDir(__dirname);

  partial1 = function(fn, x) {
    if (x != null) {
      return fn(x);
    } else {
      return function(x) {
        return fn(x);
      };
    }
  };

  negate = function(fn, input) {
    var output;
    output = fn(input);
    if (_.isNumber(output)) {
      return output * -1;
    }
    return !output;
  };

  negate = partial2(negate);

  momentVal = function(aMoment) {
    return aMoment.valueOf();
  };

  negMomentVal = function(aMoment) {
    return -1 * aMoment.valueOf();
  };

  _g = require(inHere("getters.js"));

  sorters = (function() {
    var ascending, descending, _out, _sort;
    _sort = function() {
      var momentList, sortByFn, _sorted;
      sortByFn = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      momentList = flatSplat(momentList);
      _sorted = _.sortBy(momentList, sortByFn);
      return _sorted;
    };
    ascending = partial2(_sort, momentVal);
    descending = partial2(_sort, negMomentVal);
    _out = {};
    /**
    	 * Given an array of moments or a sequence of single moments, return an array of cloned moments sorted in order of earliest to latest.
    	 *
    	 * @param  {Array} momentList An array of moments to sort, or a sequence of single moments (splatted).
    	 * @return {Array}              An array of cloned moments sorted in order of earliest -> latest.
    */

    _out.ascending = ascending;
    _out.asc = ascending;
    /**
    	 * Given an array of moments or a sequence of single moments, return an array of cloned moments sorted in order of latest to earliest.
    	 *
    	 * @param  {Array} momentList An array of moments to sort, or a sequence of single moments (splatted).
    	 * @return {Array}              An array of cloned moments sorted in order of latest -> earliest.
    */

    _out.descending = descending;
    _out.desc = descending;
    return _out;
  })();

  module.exports = sorters;

}).call(this);
