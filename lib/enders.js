// Generated by CoffeeScript 1.6.3
(function() {
  var enders, flatSplat, partial2, path, reverse2, _, _ref;

  path = require("path");

  _ref = require(path.join(__dirname, "util.js")), reverse2 = _ref.reverse2, partial2 = _ref.partial2, flatSplat = _ref.flatSplat;

  _ = require("underscore");

  enders = (function() {
    var _enders, _outs, _stringEndOf;
    _enders = ["Year", "Month", "Week", "Day", "Hour", "Minute", "Second"];
    _outs = {};
    /**
    	 * Given a target moment, return a clone rounded up to the end of its current year.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round up.
    	 * @return {Moment}              A clone of the target rounded up to the end of its current year.
    */

    _outs.endOfYear = function(targetMoment) {
      return targetMoment.clone().endOf("year");
    };
    /**
    	 * Given a target moment, return a clone rounded up to the end of its current month.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round up.
    	 * @return {Moment}              A clone of the target rounded up to the end of its current month.
    */

    _outs.endOfMonth = function(targetMoment) {
      return targetMoment.clone().endOf("month");
    };
    /**
    	 * Given a target moment, return a clone rounded up to the end of its current week.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round up.
    	 * @return {Moment}              A clone of the target rounded up to the end of its current week.
    */

    _outs.endOfWeek = function(targetMoment) {
      return targetMoment.clone().endOf("week");
    };
    /**
    	 * Given a target moment, return a clone rounded up to the end of its current day.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round up.
    	 * @return {Moment}              A clone of the target rounded up to the end of its current day.
    */

    _outs.endOfDay = function(targetMoment) {
      return targetMoment.clone().endOf("day");
    };
    /**
    	 * Given a target moment, return a clone rounded up to the end of its current hour.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round up.
    	 * @return {Moment}              A clone of the target rounded up to the end of its current hour.
    */

    _outs.endOfHour = function(targetMoment) {
      return targetMoment.clone().endOf("hour");
    };
    /**
    	 * Given a target moment, return a clone rounded up to the end of its current minute.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round up.
    	 * @return {Moment}              A clone of the target rounded up to the end of its current minute.
    */

    _outs.endOfMinute = function(targetMoment) {
      return targetMoment.clone().endOf("minute");
    };
    /**
    	 * Given a target moment, return a clone rounded up to the end of its current second.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round up.
    	 * @return {Moment}              A clone of the target rounded up to the end of its current second.
    */

    _outs.endOfSecond = function(targetMoment) {
      return targetMoment.clone().endOf("second");
    };
    _stringEndOf = function(endString, targetMoment) {
      return targetMoment.clone().endOf(endString);
    };
    /**
    	 * Given a string representing a unit of time and a target moment, return a clone with its value for that unit rounded up.
    	 *
    	 * Alternately, given only a unit string, return a stateless function which accepts a moment and return a clone rounded up to the nearest whole value for that unit.
    	 * @param  {String} unitString The unit to round up.
    	 * @param {Moment} targetMoment The moment to clone and round up.
    	 * @return {Moment}              A clone of the target with its value rounded up to the nearest `unitString`.
    */

    _outs.endOf = partial2(_stringEndOf);
    /**
    	 * Give a target moment and a string representing a unit of time, return a clone with its value for that unit rounded up.
    	 *
    	 * Alternately, given only a target moment, return a stateless function which accepts a unit string and returns a clone of the moment rounded up to the nearest whole value for that unit.
    	 * @param {Moment} targetMoment The moment to clone and round up.
    	 * @param  {String} unitString The unit to round up.
    	 * @return {Moment}              A clone of the target with its value rounded up to the nearest `unitString`.
    */

    _outs.endOfMoment = partial2(reverse2(_stringEndOf));
    return _outs;
  })();

  module.exports = enders;

}).call(this);
