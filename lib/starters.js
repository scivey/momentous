// Generated by CoffeeScript 1.6.3
(function() {
  var flatSplat, partial2, path, reverse2, starters, _, _ref;

  path = require("path");

  _ref = require(path.join(__dirname, "util.js")), reverse2 = _ref.reverse2, partial2 = _ref.partial2, flatSplat = _ref.flatSplat;

  _ = require("underscore");

  starters = (function() {
    var _outs, _stringStartOf;
    _outs = {};
    /**
    	 * Given a target moment, return a clone rounded down to the beginning of its current year.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round down.
    	 * @return {Moment}              A clone of the target rounded down to the beginning of its current year.
    */

    _outs.startOfYear = function(targetMoment) {
      return targetMoment.clone().startOf("year");
    };
    /**
    	 * Given a target moment, return a clone rounded down to the beginning of its current month.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round down.
    	 * @return {Moment}              A clone of the target rounded down to the beginning of its current month.
    */

    _outs.startOfMonth = function(targetMoment) {
      return targetMoment.clone().startOf("month");
    };
    /**
    	 * Given a target moment, return a clone rounded down to the beginning of its current week.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round down.
    	 * @return {Moment}              A clone of the target rounded down to the beginning of its current week.
    */

    _outs.startOfWeek = function(targetMoment) {
      return targetMoment.clone().startOf("week");
    };
    /**
    	 * Given a target moment, return a clone rounded down to the beginning of its current day.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round down.
    	 * @return {Moment}              A clone of the target rounded down to the beginning of its current day.
    */

    _outs.startOfDay = function(targetMoment) {
      return targetMoment.clone().startOf("day");
    };
    /**
    	 * Given a target moment, return a clone rounded down to the beginning of its current hour.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round down.
    	 * @return {Moment}              A clone of the target rounded down to the beginning of its current hour.
    */

    _outs.startOfHour = function(targetMoment) {
      return targetMoment.clone().startOf("hour");
    };
    /**
    	 * Given a target moment, return a clone rounded down to the beginning of its current minute.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round down.
    	 * @return {Moment}              A clone of the target rounded down to the beginning of its current minute.
    */

    _outs.startOfMinute = function(targetMoment) {
      return targetMoment.clone().startOf("minute");
    };
    /**
    	 * Given a target moment, return a clone rounded down to the beginning of its current second.
    	 *
    	 * @param  {Moment} targetMoment A moment to clone and round down.
    	 * @return {Moment}              A clone of the target rounded down to the beginning of its current second.
    */

    _outs.startOfSecond = function(targetMoment) {
      return targetMoment.clone().startOf("second");
    };
    _stringStartOf = function(startString, targetMoment) {
      return targetMoment.clone().startOf(startString);
    };
    /**
    	 * Given a string representing a unit of time and a target moment, return a clone rounded down to the nearest whole value of that unit.
    	 *
    	 * Alternately, given only a unit string, return a stateless function which accepts a moment and returns a clone rounded down to the nearest whole value of that unit.
    	 * @param  {String} unitString The unit to round down.
    	 * @param {Moment} targetMoment The moment to clone and round down.
    	 * @return {Moment}              A clone of the target with its value rounded down to the nearest whole `unitString`.
    */

    _outs.startOf = partial2(_stringStartOf);
    /**
    	 * Given a target moment and a string representing a unit of time, return a clone rounded down to the nearest whole value of that unit.
    	 * 
    	 * Alternately, given only a target moment, return a stateless function which accepts a unit string and returns a clone of the moment rounded down to the nearest whole value of that unit.
    	 * @param {Moment} targetMoment The moment to clone and round down.
    	 * @param  {String} unitString The unit to round down.
    	 * @return {Moment}              A clone of the target with its value rounded down to the nearest whole `unitString`.
    */

    _outs.startOfMoment = partial2(reverse2(_stringStartOf));
    return _outs;
  })();

  module.exports = starters;

}).call(this);
