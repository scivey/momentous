// Generated by CoffeeScript 1.6.3
(function() {
  var flatSplat, helpers, inDir, inhere, misc, moment, partial2, path, reverse2, splattedPartial2, _, _ref,
    __slice = [].slice;

  path = require("path");

  _ref = require(path.join(__dirname, "util.js")), reverse2 = _ref.reverse2, partial2 = _ref.partial2, flatSplat = _ref.flatSplat, inDir = _ref.inDir, splattedPartial2 = _ref.splattedPartial2;

  _ = require("underscore");

  inhere = inDir(__dirname);

  misc = require(inhere("misc.js"));

  moment = require("moment");

  helpers = (function() {
    var format, intRange, log, makeMoments, outs, stringify, _ISODateRegex, _format, _formattedLogger, _formattedMakeMoments, _formattedStringifier, _makeMoments, _preformattedFormatter, _stringify;
    _makeMoments = function() {
      var dateList, formatStr, _moments;
      formatStr = arguments[0], dateList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      dateList = flatSplat(dateList);
      _moments = _.map(dateList, function(oneDate) {
        if (moment.isMoment(oneDate)) {
          return oneDate.clone();
        }
        return moment(formatStr, oneDate);
      });
      return _moments;
    };
    _formattedMakeMoments = function(formatStr) {
      return function() {
        var dateList;
        dateList = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        dateList = flatSplat(dateList);
        return _makeMoments(formatStr, dateList);
      };
    };
    _ISODateRegex = /[0-9]{4}-[0-9]{2}-[0-9]{2}/;
    makeMoments = function() {
      var dateList, formatStr, _dateList;
      formatStr = arguments[0], dateList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      dateList = flatSplat(dateList);
      if (_ISODateRegex.test(formatStr)) {
        _dateList = _.clone(dateList);
        _dateList = _.flatten([formatStr, _dateList]);
        return _makeMoments("YYYY-MM-DD", _dateList);
      }
      if (_.isString(formatStr) && _.size(dateList) === 0) {
        return _formattedMakeMoments(formatStr);
      }
      return _makeMoments(formatStr, dateList);
    };
    _format = function() {
      var formatStr, momentList, _formatted, _iter;
      formatStr = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      momentList = flatSplat(momentList);
      if (moment.isMoment(formatStr)) {
        momentList = _.flatten([formatStr, momentList]);
        formatStr = null;
      } else if (_.isArray(formatStr)) {
        momentList = formatStr;
        formatStr = null;
      }
      _formatted = [];
      if (formatStr != null) {
        _iter = function(oneMoment) {
          return _formatted.push(oneMoment.format(formatStr));
        };
      } else {
        _iter = function(oneMoment) {
          return _formatted.push(oneMoment.format());
        };
      }
      _.each(momentList, _iter);
      return _formatted;
    };
    _preformattedFormatter = function(formatStr) {
      return function() {
        var momentList;
        momentList = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return _stringify(formatStr, momentList);
      };
    };
    format = function() {
      var formatStr, momentList;
      formatStr = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (_.isString(formatStr) && _.size(momentList) === 0) {
        return _preformattedFormatter(formatStr);
      }
      return _format(formatStr, momentList);
    };
    _stringify = function() {
      var formatStr, momentList, outs, _formatted;
      formatStr = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      momentList = flatSplat(momentList);
      _formatted = _format(formatStr, momentList);
      outs = "[ " + _formatted.join(", ") + " ]";
      return outs;
    };
    _formattedStringifier = function(formatStr) {
      return function() {
        var momentList;
        momentList = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        momentList = flatSplat(momentList);
        return _stringify(formatStr, momentList);
      };
    };
    stringify = function() {
      var formatStr, momentList;
      formatStr = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (_.isString(formatStr) && _.size(momentList) === 0) {
        return _formattedStringifier(formatStr);
      }
      return _stringify(formatStr, momentList);
    };
    _formattedLogger = function(formatStr) {
      return function() {
        var momentList;
        momentList = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        momentList = flatSplat(momentList);
        return console.log(stringify(momentList));
      };
    };
    log = function() {
      var formatStr, momentList;
      formatStr = arguments[0], momentList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (_.isString(formatStr) && _.size(momentList) === 0) {
        return _formattedLogger(formatStr);
      }
      momentList = flatSplat(momentList);
      return console.log(stringify(formatStr, momentList));
    };
    intRange = function(start, end) {
      var i, range, _i, _nums;
      range = end - start;
      _nums = [];
      for (i = _i = 0; 0 <= range ? _i <= range : _i >= range; i = 0 <= range ? ++_i : --_i) {
        _nums.push(start + i);
      }
      return _nums;
    };
    return outs = {
      makeMoments: makeMoments,
      stringify: stringify,
      format: format,
      log: log,
      intRange: intRange
    };
  })();

  module.exports = helpers;

}).call(this);
