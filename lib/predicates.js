// Generated by CoffeeScript 1.6.3
(function() {
  var checkMoment, flatSplat, moment, partial2, partial3, path, preds, reverse2, xyz_from_yzx, xyz_from_zxy, _, _ref;

  path = require("path");

  _ref = require(path.join(__dirname, "util.js")), reverse2 = _ref.reverse2, partial2 = _ref.partial2, partial3 = _ref.partial3, flatSplat = _ref.flatSplat;

  _ = require("underscore");

  moment = require("moment");

  checkMoment = function(possibleMoment) {
    if (moment.isMoment(possibleMoment)) {
      return possibleMoment;
    }
    return moment(possibleMoment);
  };

  xyz_from_yzx = function(fn) {
    return function(y, z, x) {
      return fn(x, y, z);
    };
  };

  xyz_from_zxy = function(fn) {
    return function(z, x, y) {
      return fn(x, y, z);
    };
  };

  preds = (function() {
    var _isAfter, _isBefore, _isBetween, _outs;
    _outs = {};
    _isBetween = function(beforeMoment, afterMoment, possiblyBetween) {
      var cmp;
      beforeMoment = checkMoment(beforeMoment);
      afterMoment = checkMoment(afterMoment);
      cmp = {};
      if (beforeMoment.isBefore(afterMoment)) {
        cmp.before = beforeMoment;
        cmp.after = afterMoment;
      } else {
        cmp.before = afterMoment;
        cmp.after = beforeMoment;
      }
      if (beforeMoment.isBefore(possiblyBetween) || beforeMoment.isSame(possiblyBetween)) {
        if (possiblyBetween.isBefore(afterMoment)) {
          return true;
        }
      }
      return false;
    };
    /**
    	 * Given three moments, return true if the third moment occurs in the range between the first and second.
    	 *
    	 * @param {Moment} start A moment representing the start of the range.
    	 * @param {Moment} end A moment representing the end of the range.
    	 * @param  {Moment} maybeBetween The moment to test.
    	 * @return {Boolean}              True if `maybeBetween` occurs between `start` and `end`; otherwise `false`.
    */

    _outs.isBetween = partial3(_isBetween);
    /**
    	 * Given three moments, return true if the first moment occurs in the range between the second and third.
    	 *
    	 * @param {Moment} maybeBetween The moment to test.
    	 * @param {Moment} start A moment representing the start of the range.
    	 * @param {Moment} end A moment representing the end of the range.
    	 * @return {Boolean}              True if `maybeBetween` occurs between `start` and `end`; otherwise `false`.
    */

    _outs.isMomentBetween = partial3(xyz_from_zxy(_isBetween));
    _isAfter = function(compareAgainst, compare) {
      compare = checkMoment(compare);
      if (compare.isAfter(compareAgainst)) {
        return true;
      }
      return false;
    };
    /**
    	 * Given two moments, return true if the second moment occurs after the first.
    	 *
    	 * @param {Moment} compareAgainst The moment to test against.
    	 * @param {Moment} compare The moment to test.
    	 * @return {Boolean}              True if `compare` occurs after `compareAgainst`
    */

    _outs.isAfter = partial2(_isAfter);
    _isBefore = function(compareAgainst, compare) {
      compare = checkMoment(compare);
      if (compare.isBefore(compareAgainst)) {
        return true;
      }
      return false;
    };
    /**
    	 * Given two moments, return true if the second moment occurs before the first.
    	 *
    	 * @param {Moment} compareAgainst The moment to test against.
    	 * @param {Moment} compare The moment to test.
    	 * @return {Boolean}              True if `compare` occurs before `compareAgainst`
    */

    _outs.isBefore = partial2(_isBefore);
    return _outs;
  })();

  module.exports = preds;

}).call(this);
