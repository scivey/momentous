// Generated by CoffeeScript 1.6.3
(function() {
  var assert, catMoments, cloneMomentList, flatSplat, inDir, inLib, inSpec, intRange, makeMomentBetween, makeNMomentsBetween, moment, path, _, _msort,
    __slice = [].slice;

  _ = require("underscore");

  moment = require("moment");

  path = require("path");

  assert = require("better-assert");

  inDir = function(dir) {
    if (dir == null) {
      dir = __dirname;
    }
    return function(fName) {
      return path.join(dir, fName);
    };
  };

  inSpec = inDir();

  inLib = inDir("../lib");

  _msort = require(inLib("sorters.js"));

  intRange = function(start, end) {
    var num, offset, range;
    range = (end - start) + 1;
    offset = Math.random() * range;
    offset = Math.floor(offset);
    num = start + offset;
    return num;
  };

  makeMomentBetween = function(first, second) {
    var diffAmt, working, _diff;
    working = second.clone();
    _diff = working.diff(first);
    _diff = Math.abs(_diff);
    diffAmt = Math.random() * _diff;
    if (diffAmt < 0.05) {
      diffAmt += 0.05;
    }
    if (diffAmt > 0.95) {
      diffAmt -= 0.05;
    }
    working.subtract(diffAmt);
    return working;
  };

  makeNMomentsBetween = function(n, first, second) {
    var _count, _moments;
    _moments = [];
    _count = n;
    while (n--) {
      _moments.push(makeMomentBetween(first, second));
    }
    return _moments;
  };

  flatSplat = function(list) {
    if (_.size(list) === 1 && _.isArray(list[0])) {
      return list[0];
    }
    return list;
  };

  cloneMomentList = function(momentList) {
    var outs;
    if (moment.isMoment(momentList)) {
      return momentList.clone();
    }
    momentList = flatSplat(momentList);
    outs = _.map(momentList, function(oneMoment) {
      return oneMoment.clone();
    });
    return outs;
  };

  catMoments = function() {
    var momentLists, _momentLists;
    momentLists = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _momentLists = _.flatten(flatSplat(momentLists));
    return _momentLists;
  };

  describe("momentous", function() {
    var all, allButNow, earlies, earlyRef, inTwelveHrs, lateRef, lates, midEarlies, midLates, now, shuffled, tomorrow, twelveHrsAgo, yesterday;
    now = moment();
    yesterday = {};
    all = {};
    tomorrow = {};
    inTwelveHrs = {};
    twelveHrsAgo = {};
    earlyRef = {};
    lateRef = {};
    earlies = [];
    lates = [];
    allButNow = [];
    shuffled = [];
    midEarlies = [];
    midLates = [];
    beforeEach(function() {
      var _earlyCount, _lateCount;
      now = moment();
      yesterday = now.clone().subtract("days", 1);
      tomorrow = now.clone().add("days", 1);
      inTwelveHrs = now.clone().add("hours", 12);
      twelveHrsAgo = now.clone().subtract("hours", 12);
      earlyRef = now.clone().subtract("years", 5);
      lateRef = now.clone().add("years", 5);
      _earlyCount = intRange(20, 30);
      _lateCount = intRange(20, 30);
      earlies = makeNMomentsBetween(_earlyCount, earlyRef, yesterday);
      midEarlies = _.clone(earlies);
      earlies.push(yesterday.clone());
      earlies.push(twelveHrsAgo.clone());
      earlies.push(earlyRef.clone());
      earlies = _.shuffle(earlies);
      lates = makeNMomentsBetween(_lateCount, tomorrow, lateRef);
      midLates = _.clone(lates);
      lates.push(tomorrow.clone());
      lates.push(inTwelveHrs.clone());
      lates.push(lateRef.clone());
      lates = _.shuffle(lates);
      allButNow = catMoments(earlies, lates);
      all = _.clone(allButNow);
      all.push(now.clone());
      return shuffled = _.shuffle(all);
    });
    describe("sort.ascending", function() {
      return it("sorts Moments from earliest to latest", function() {
        var i, sorted, _current, _i, _ref, _results;
        sorted = _msort.ascending(all);
        _current = sorted[0];
        _results = [];
        for (i = _i = 1, _ref = sorted.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          assert(_current.isBefore(sorted[i]));
          _results.push(_current = sorted[i]);
        }
        return _results;
      });
    });
    return describe("sort.descending", function() {
      return it("sorts Moments from latest to earliest", function() {
        var i, sorted, _current, _i, _ref, _results;
        sorted = _msort.descending(all);
        _current = sorted[0];
        _results = [];
        for (i = _i = 1, _ref = sorted.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          assert(_current.isAfter(sorted[i]));
          _results.push(_current = sorted[i]);
        }
        return _results;
      });
    });
  });

}).call(this);
